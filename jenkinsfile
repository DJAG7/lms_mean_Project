pipeline {
    agent any

    environment {
        DOCKER_HUB_KEY = credentials('ankurdockercredentials')
        DOCKER_IMAGE_FRONTEND = 'ankuronlyme/capstone_frontend'
        DOCKER_IMAGE_BACKEND = 'ankuronlyme/capstone_backend'
        DOCKER_TAG = "${env.BUILD_ID}"
        
        GITHUB_URL = 'https://github.com/ankuronlyme/lms_mean_Project.git'
        GIT_BRANCH = 'main'
        
        KUBECTL_PATH = '"C:\\Program Files\\Docker\\Docker\\resources\\bin\\kubectl.exe"'
        KUBE_CONFIG_DIR = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\lms-capstone\\compiler\\k8'
        
        AWS_REGION = 'ap-south-1'
        AWS_EKS_CLUSTER_NAME = 'lms_cluster'
        Aws_Credentials = 'Rootawskey'
        TERRAFORM_DIR = 'C:/Users/pc/DEVOPS Assignments/capstone/infra/terraform'
        
        BACKEND_DIR = 'C:/Users/pc/DEVOPS Assignments/capstone/lms-backend'
        FRONTEND_DIR = 'C:/Users/pc/DEVOPS Assignments/capstone/lms-frontend'
    }
    
    tools {
        terraform 'terraform_1.7.5' // Specify the name you gave to the Terraform tool in Jenkins
    }

    stages {
        stage('Checkout from Git') {
            steps {
                git branch: env.GIT_BRANCH, url: env.GITHUB_URL
            }
        }

        stage('Build Docker Image') {
            parallel {
                stage('build backend') {
                    steps {
                        script {
                            // Build Docker image
                            docker.withRegistry('https://index.docker.io/v1/', 'ankurdockercredentials') {
                                def customImage = docker.build("${env.DOCKER_IMAGE_BACKEND}:${env.BUILD_ID}", "./lms-backend")
                                customImage.push()
                            }
                        }
                    }
                }

                stage('build frontend') {
                    steps {
                        script {
                            docker.withRegistry('https://index.docker.io/v1/', 'ankurdockercredentials') {
                                def customImage = docker.build("${env.DOCKER_IMAGE_FRONTEND}:${env.BUILD_ID}", "./lms-frontend")
                                customImage.push()
                            }
                        }
                    }
                }
            }
        }

        stage('Verify Terraform Installation') {
            steps {
                script {
                    // Verify if Terraform is installed and available in PATH
                    bat '''
                        echo "Checking Terraform version..."
                        terraform -v
                        if %ERRORLEVEL% NEQ 0 (
                            echo "Terraform is not installed or not in PATH"
                            exit /b 1
                        )
                    '''
                }
            }
        }
        
        stage('Connect to terraform') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'Rootawskey', region: env.AWS_REGION)]) {
                        dir(env.TERRAFORM_DIR) {
                            bat 'terraform init'
                            bat 'terraform apply -auto-approve'
                        }
                    }
                }
            }
        }

        stage('Configure kubectl') {
            steps {
                script {
                    // Update kubeconfig to point to the EKS cluster in the correct region
                    withCredentials([aws(credentialsId: 'Rootawskey', region: env.AWS_REGION)]) {
                        bat "aws eks --region ${env.AWS_REGION} update-kubeconfig --name ${env.AWS_EKS_CLUSTER_NAME}"
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    // Define withCredentials block properly
                    withCredentials([aws(credentialsId: 'Rootawskey', region: env.AWS_REGION)]) {
                        // Apply Kubernetes manifest files
                        dir(env.KUBE_CONFIG_DIR) {
                            bat "${env.KUBECTL_PATH} apply -f Configmap.yaml"
                            bat "${env.KUBECTL_PATH} apply -f postgres-secret.yaml"
                            bat "${env.KUBECTL_PATH} apply -f postgres-pvc.yaml"
                            bat "${env.KUBECTL_PATH} apply -f judge0-db-deployment.yaml"
                            bat "${env.KUBECTL_PATH} apply -f postgres-service.yaml"
                            bat "${env.KUBECTL_PATH} apply -f redis-pvc.yaml"
                            bat "${env.KUBECTL_PATH} apply -f judge0-redis-deployment.yaml"
                            bat "${env.KUBECTL_PATH} apply -f compiler_service.yaml"
                            bat "${env.KUBECTL_PATH} apply -f judge0-server-deployment.yaml"
                            bat "${env.KUBECTL_PATH} apply -f judge0-workers-deployment.yaml"
                        }
                        dir(env.BACKEND_DIR) {
                            bat "${env.KUBECTL_PATH} apply -f backend_deployment.yaml"
                            bat "${env.KUBECTL_PATH} apply -f backend_service.yaml"
                        }
                        dir(env.FRONTEND_DIR) {
                            bat "${env.KUBECTL_PATH} apply -f frontend_deployment.yaml"
                            bat "${env.KUBECTL_PATH} apply -f frontend_service.yaml"
                        }
                    }
                }
            }
        }
    }
}
