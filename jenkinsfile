pipeline {
    agent any

    environment {
        DOCKER_HUB_KEY = credentials('ankurdockercredentials')
        DOCKER_IMAGE_FRONTEND = 'ankuronlyme/capstone_frontend'
        DOCKER_IMAGE_BACKEND = 'ankuronlyme/capstone_backend'
        DOCKER_TAG = "${env.BUILD_ID}"
        
        GITHUB_URL = 'https://github.com/ankuronlyme/lms_mean_Project.git'
        GIT_BRANCH = 'main'
        
        HELM_CHART_PATH_BE = './lms-chart/backend-chart'
        HELM_CHART_PATH_FE = './lms-chart/frontend-chart'
        AWS_REGION = 'ap-south-1'
        AWS_EKS_CLUSTER_NAME = 'lms-cluster'
        Aws_Credentials = 'Rootawskey'
        TERRAFORM_DIR = './infra/terraform'
    }

    stages {
        stage('Checkout from Git') {
            steps {
                git branch: env.GIT_BRANCH, url: env.GITHUB_URL
            }
        }

        stage('Build Docker Image') {
            parallel {
                stage('build backend') {
                    steps {
                        script {
                            // Build Docker image
                            docker.withRegistry('https://index.docker.io/v1/', 'ankurdockercredentials') {
                                def customImage = docker.build("${env.DOCKER_IMAGE_BACKEND}:${env.BUILD_ID}", "./lms-backend")
                                customImage.push()
                            }
                        }
                    }
                }

                stage('build frontend') {
                    steps {
                        script {
                            docker.withRegistry('https://index.docker.io/v1/', 'ankurdockercredentials') {
                                def customImage = docker.build("${env.DOCKER_IMAGE_FRONTEND}:${env.BUILD_ID}", "./lms-frontend")
                                customImage.push()
                            }
                        }
                    }
                }
            }
        }

        stage('Connect to terraform') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'Rootawskey', region: env.AWS_REGION)]) {
                        dir(env.TERRAFORM_DIR) {
                            sh 'terraform init'
                            sh 'terraform apply -auto-approve'
                        }
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    dir('./compiler/k8'){
                        sh 'kubectl apply -f configmap.yaml'
                        sh 'kubectl apply -f postgres-secret.yaml'
                        sh 'kubectl apply -f postgres-pvc.yaml'
                        sh 'kubectl apply -f judge0-db-deployment.yaml'
                        sh 'kubectl apply -f postgres-service.yaml'
                        sh 'kubectl apply -f redis-pvc.yaml'
                        sh 'kubectl apply -f judge0-redis-deployment.yaml'
                        sh 'kubectl apply -f compiler_service.yaml'
                        sh 'kubectl apply -f judge0-server-deployment.yaml'
                        sh 'kubectl apply -f judge0-workers-deployment.yaml'
                    } 

                    dir('./lms-backend'){
                        sh 'kubectl apply -f backend_deployment.yaml'
                        sh 'kubectl apply -f backend_service.yaml'
                    } 

                    withCredentials([aws(credentialsId: 'Rootawskey', region: env.AWS_REGION)]) {
                        // Delete Helm releases
                        // sh "helm --uninstall ${env.HELM_RELEASE_NAME_BE}"
                        // sh "helm --uninstall ${env.HELM_RELEASE_NAME_FE}"

                        sh "aws eks --region ${env.AWS_REGION} update-kubeconfig --name ${env.AWS_EKS_CLUSTER_NAME}"
                        sh "helm upgrade --install --set image.tag=${env.DOCKER_TAG} ${env.HELM_RELEASE_NAME_BE} ${env.HELM_CHART_PATH_BE}"
                        sh "helm upgrade --install --set image.tag=${env.DOCKER_TAG} ${env.HELM_RELEASE_NAME_FE} ${env.HELM_CHART_PATH_FE}"
                    }
                }
            }
        }
    }
}
