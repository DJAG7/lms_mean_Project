// Replace all the credentials and directories to run this jenkinsfile on a local machine

|pipeline {
    agent any

    environment {
        DOCKER_HUB_KEY = credentials('dockercredentials') //Configure Docker Credentials
        DOCKER_IMAGE_FRONTEND = 'dockerhubuid/capstone_frontend' //Docker Hub Image
        DOCKER_IMAGE_BACKEND = 'dockerhubuid/capstone_backend' //Docker Hub Image
        DOCKER_TAG = "${env.BUILD_ID}"
        
        GITHUB_URL = 'https://github.com/ankuronlyme/lms_mean_Project.git'
        GIT_BRANCH = 'main'
        
        KUBECTL_PATH = 'kubectl.exe' // Replace with your KubeCTL file
        Compiler_DIR = '' //Replace with your Compiler Directory
        
        AWS_REGION = 'ap-south-1'
        AWS_EKS_CLUSTER_NAME = 'capstone_cluster'
        Aws_Credentials = 'Rootawskey'
        TERRAFORM_DIR = 'repository/teraa' //Replace with your Terraform Directory or Repository
        
        BACKEND_DIR = 'repository/lms-backend' //Replace with your Backend Directory or Repository
        FRONTEND_DIR = 'repository/lms-frontend' //Replace with your Frontend Directory or Repository
        INGRESS_DIR = 'repository/ingress' //Replace with your Ingress Directory or Repository
    }
    
    tools {
        terraform 'terraform_1.7.5' // Specify the name you gave to the Terraform tool in Jenkins
        helm 'helm_3.0.0' //Specify helm release
    }

    stages {
        stage('Checkout from Git') {
            steps {
                git branch: env.GIT_BRANCH, url: env.GITHUB_URL
            }
        }

        stage('Build Docker Image') {
            parallel {
                stage('build backend') {
                    steps {
                        script {
                            // Build Docker image
                            docker.withRegistry('https://index.docker.io/v1/', 'dockercredentials') {
                                def customImage = docker.build("${env.DOCKER_IMAGE_BACKEND}:${env.BUILD_ID}", "./lms-backend")
                                customImage.push()
                            }
                        }
                    }
                }

                stage('build frontend') {
                    steps {
                        script {
                            docker.withRegistry('https://index.docker.io/v1/', 'dockercredentials') {
                                def customImage = docker.build("${env.DOCKER_IMAGE_FRONTEND}:${env.BUILD_ID}", "./lms-frontend")
                                customImage.push()
                            }
                        }
                    }
                }
            }
        }

        stage('Verify Terraform Installation') {
            steps {
                script {
                    // Verify if Terraform is installed and available in PATH
                    bat '''
                        echo "Checking Terraform version..."
                        terraform -v
                        if %ERRORLEVEL% NEQ 0 (
                            echo "Terraform is not installed or not in PATH"
                            exit /b 1
                        )
                    '''
                }
            }
        }
        
        stage('Connect to terraform') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'Rootawskey', region: env.AWS_REGION)]) {
                        dir(env.TERRAFORM_DIR) {
                            // bat 'terraform init'
                            // bat 'nslookup sts.ap-south-1.amazonaws.com'
                            bat 'terraform apply -auto-approve'
                        }
                    }
                }
            }
        }

        stage('Configure kubectl') {
            steps {
                script {
                    // Update kubeconfig to point to the EKS cluster in the correct region
                    withCredentials([aws(credentialsId: 'Rootawskey', region: env.AWS_REGION)]) {
                        bat "aws eks --region ${env.AWS_REGION} update-kubeconfig --name ${env.AWS_EKS_CLUSTER_NAME}"
                    }
                }
            }
        }
        stage('Deploy Prometheus and Grafana') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'Rootawskey', region: env.AWS_REGION)]) {
                        bat 'helm repo add prometheus-community https://prometheus-community.github.io/helm-charts'
                        bat 'helm repo add grafana https://grafana.github.io/helm-charts'
                        bat 'helm repo update'
                        bat 'helm install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace'
                        bat 'helm install grafana grafana/grafana --namespace monitoring --set adminPassword=your_secure_password'
                    }
                }
            }
        }

        stage('Get Prometheus and Grafana IPs') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'Rootawskey', region: env.AWS_REGION)]) {
                        def prometheusIp = bat(script: 'kubectl get svc prometheus-server -n monitoring -o jsonpath="{.status.loadBalancer.ingress[0].ip}"', returnStdout: true).trim()
                        def grafanaIp = bat(script: 'kubectl get svc grafana -n monitoring -o jsonpath="{.status.loadBalancer.ingress[0].ip}"', returnStdout: true).trim()
                        
                        echo "Prometheus Dashboard: http://${prometheusIp}:80"
                        echo "Grafana Dashboard: http://${grafanaIp}:80"
                    }
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                script {
                    // Define withCredentials block properly
                    withCredentials([aws(credentialsId: 'Rootawskey', region: env.AWS_REGION)]) {
                        // Apply Kubernetes manifest files
                    
                        
                        dir(env.Compiler_DIR) {
                            bat "${env.KUBECTL_PATH} apply -f Configmap.yaml"
                            bat "${env.KUBECTL_PATH} apply -f storageclass.yaml"
                            bat "${env.KUBECTL_PATH} apply -f postgres-secret.yaml"
                            bat "${env.KUBECTL_PATH} apply -f postgres-pv.yaml"
                            bat "${env.KUBECTL_PATH} apply -f postgres-pvc.yaml"
                            bat "${env.KUBECTL_PATH} apply -f judge0-db-deployment.yaml"
                            bat "${env.KUBECTL_PATH} apply -f postgres-service.yaml"
                            bat "${env.KUBECTL_PATH} apply -f redis-pv.yaml"
                            bat "${env.KUBECTL_PATH} apply -f redis-pvc.yaml"
                            bat "${env.KUBECTL_PATH} apply -f judge0-redis-deployment.yaml"
                            bat "${env.KUBECTL_PATH} apply -f redis-service.yaml"
                            bat "${env.KUBECTL_PATH} apply -f compiler_service.yaml"
                            bat "${env.KUBECTL_PATH} apply -f judge0-server-deployment.yaml"
                            bat "${env.KUBECTL_PATH} apply -f judge0-workers-deployment.yaml"
                        }
                        dir(env.BACKEND_DIR) {
                            def backendTag = "${env.BUILD_ID}"
                            def deploymentYaml = readFile 'backend_deployment.yaml'
                            deploymentYaml = deploymentYaml.replaceAll('\\$\\{BUILD_NUMBER\\}', backendTag)
                            writeFile file: 'updated_backend_deployment.yaml', text: deploymentYaml
                            
                            bat "${env.KUBECTL_PATH} apply -f backend-secret.yaml"
                            bat "${env.KUBECTL_PATH} apply -f updated_backend_deployment.yaml"
                            bat "${env.KUBECTL_PATH} apply -f backend_service.yaml"
                        }
                        dir(env.FRONTEND_DIR) {
                            def frontendTag = "${env.BUILD_ID}"
                            def deploymentYaml = readFile 'frontend_deployment.yaml'
                            deploymentYaml = deploymentYaml.replaceAll('\\$\\{BUILD_NUMBER\\}', frontendTag)
                            writeFile file: 'updated_frontend_deployment.yaml', text: deploymentYaml
                            

                            bat "${env.KUBECTL_PATH} apply -f updated_frontend_deployment.yaml"
                            bat "${env.KUBECTL_PATH} apply -f frontend_service.yaml"
                        }
                    }
                }
            }
        }
    }
}
